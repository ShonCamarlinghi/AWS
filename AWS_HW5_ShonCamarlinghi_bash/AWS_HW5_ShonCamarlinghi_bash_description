Using the AWS Command lines tools from a bash shell, this assignment will ask you to create a set bash shell scripts to manage a simple S3 storage repository that stores and manages files on a per-user basis.

Remember: bucket names must be unique.

You will have one bucket to store user information: user-name, [password, email] that holds all users.

For each user you will have a bucket that the user can store files in.



NOTE: this assignment must use different buckets than you used in assignment 4.

01) createuser will have these command line arguments:

user-name password email

for example, in a console/terminal:

createuser MrCat NiceCat cats@cats.com

On first use , create the bucket you need to hold users in.

Create an object in the users bucket that stores an object as follows:
key=user-name
values=[password, user-email] (a list)

You must be able to handle the case where the user already exists. For example, if createuser is called for an existing user, update the password and email address in the S3 object that hold that user's information.


02) uploadfile will have these command line arguments:

user-name password file-key path-to-file-to-upload

user-name = the user-name from createuser
password = the user's password from createuser
file-key = is a tag/string that the user can associate with an uploaded file
path-to-file-to-upload = the path to a file on your machine to save in S3

The file-key and path-to-file-to-upload may have spaces

For example: uploadfile MrCat NiceCat My-Favorite-Dog-Picture .\dog1.jpg


You must handle typical errors like: user does not exist, bad password, cannot find file

03) listfiles will have these command line arguments:

user-name password

For example: listfiles MtCat NiceCat

For each user file stored, this script prints one line to the console:

file-key , file-name

NOTE: do not worry about formatting the console output. The columns for each file do NOT have to line up.

04) getfile will have these command line arguments:

user-name password file-key path-to-save-file-to

For example: getfile MrCat NiceCat 'Picture of my favorite dog' .\MyFavoriteDog

05) deletefile will have there command line parameters:

user-name password file-key

For example: deletefile MrCat NiceCat Bird01

